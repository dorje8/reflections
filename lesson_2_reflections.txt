Reflection 8:

When you initialize a repository it creates a .git tracking file associated with the directory. You will still need to commit files to track changes on those files. 

Reflection 9:

The staging area is a place where files can be grouped before creating a commit with he files in mind. It is a way to separate out files for commits in a logical manner.

Reflection 10:

By comparing the working directory and the staging area you can be sure that you are only really committing changes that make sense for a commit. Using the open diff command you can check this and make more incremental changes.

Reflection 11:

Branches can help with experimental changes or changes that may take the code in a different direction that needs to be debugged separately. This allows you to maintain a primary working branch for the primary directives or just to have a functional main piece of code.

Reflection 12:

Branch and versioning structure is virtual and can easily become complex. Diagrams help you know know what is actually going on by visualizing the virtual structure in a meaningful way.

Reflection 13:

Merging two branches brings together all the features of both branch while preserving their individual commit structure so the separate commits can still be accessed even though the master is now one file. The diagram represents the separate paths that resulted in the new master branch.

Reflection 14:

Automatic merges save a lot of time and in many cases can accurately combine two separate branches when there isn’t overlapping changes. Manual merges are necessary sometimes when the system isn’t sure if code is repetitive or replacement. This requires some manual intervention.

